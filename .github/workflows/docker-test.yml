### Start test files for Docker-DocumentServer
run-name: "Scheduled tests Docker-DocumentServer"

on:
  workflow_dispatch:
  #  push:
    #  pull_request:
    #types: [opened, reopened, synchronize]
    #    paths-ignore:
    # - '.github/**'
    # - 'tests/**'
    # - '**/README.md'

jobs:
  start_test_files:
    name: "File: ${{ matrix.name }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - compose_file: postgres.yml
            variables: "POSTGRES_VERSION=9.5"                           # postgtres 9.5 version
            name: "Test with Postgresql 9.5"

          - compose_file: postgres.yml
            variables: "POSTGRES_VERSION=9"                             # postgtres 9 version
            name: "Test with Postgresql 9"

          - compose_file: postgres.yml
            variables: "POSTGRES_VERSION=10"                            # postgtres 10 version
            name: "Test with Postgresql 10"

          - compose_file: postgres.yml
            variables: "POSTGRES_VERSION=11"                            # postgtres 11 version
            name: "Test with Postgresql 11"

          - compose_file: postgres.yml
            variables: "POSTGRES_VERSION=12"                            # postgtres 12 version
            name: "Test with Postgresql 12"
            
          - compose_file: postgres.yml  
            # postgresql custom variables
            name: "Test postgres custom variables"
            variables: "DB_NAME=mydb                                
                DB_USER=myuser
                DB_PWD=password
                POSTGRES_DB=mydb
                POSTGRES_USER=myuser"

          - compose_file: activemq.yml
            variables: "ACTIVEMQ_VERSION=latest"                        # latest version activemq
            name: "Test with Activemq latest"

          - compose_file: activemq.yml
            variables: "ACTIVEMQ_VERSION=5.14.3"                        # activemq 5.14.3
            name: "Test with Activemq 5.14.3"

          - compose_file: rabbitmq.yml
            variables: "RABBITMQ_VERSION=latest"                        # rabbitmq latest
            name: "Test with Rabbitmq latest"

          - compose_file: rabbitmq.yml
            variables: "RABBITMQ_VERSION=3"                             # rabbitmq 3
            name: "Test with Rabbitmq 3"

          - compose_file: redis.yml
            variables: "REDIS_VERSION=5"                                # redis 5
            name: "Test with Redis 5"

          - compose_file: redis.yml
            variables: "REDIS_VERSION=6"                                # redis 6
            name: "Test with Redis 6"

          - compose_file: graphite.yml
            variables: "GRAPHITE_VERSION=latest"                        # graphite latest
            name: "Test with Graphite latest"

          - compose_file: mysql.yml
            variables: "MYSQL_VERSION=5"                                # mysql 5
            name: "Test with MySQL 5"

          - compose_file: mysql.yml
            variables: "MYSQL_VERSION=8"                                # mysql 8
            name: "Test with MySQL 8"

          - compose_file: mysql.yml
            variables: "MYSQL_VERSION=5.7"                              # mysql 5.7
            name: "Test with MySQL 5.7"

          - compose_file: mariadb.yml
            variables: "MARIADB_VERSION=10"                             # mariadb 10
            name: "Test with MariaDB 10"

          - compose_file: mariadb.yml
            variables: "MARIADB_VERSION=10.5"                           # mariadb 10.5
            name: "Test with MariaDB 10.5"
            
          - compose_file: certs.yml                                   # certificates (default tls if onlyoffice not exists)            
            name: "Test certs.yml"
            variables: "ssl=true"

          - compose_file: certs.yml                                   # certificates (default onlyoffice if exists)
            name: "Test with Certs"
            variables: " ssl=true 
            private_key=onlyoffice.key 
            certificate_request=onlyoffice.csr 
            certificate=onlyoffice.crt "

          - compose_file: rabbitmq-old.yml                            # rabbitmq old variables
            name: "Test with rabbitmq-old"

          - compose_file: postgres-old.yml
            name: "Test with postgres_old"

          - compose_file: certs-customized.yml                        # custom certificates
            name: "Test with certs-customized"
            variables: " ssl=true
                private_key=mycert.key
                certificate_request=mycert.csr
                certificate=mycert.crt
                SSL_CERTIFICATE_PATH=/var/www/onlyoffice/Data/certs/mycert.crt
                SSL_KEY_PATH=/var/www/onlyoffice/Data/certs/mycert.key "

          - compose_file: standalone.yml                              # community edition       
            name: "Test with standalone file"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: "Start ${{ matrix.name }}"
        run: |
          cd tests                                                    
          export config=certs-customized.yml                    # Export .yml files in variable config
          echo "export variables for ${{ matrix.compose_file }}"       
          for v in ${{ matrix.variables }}; do
            export ${v}
          done
          echo $v
